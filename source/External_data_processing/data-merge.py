import osimport pandas as pdimport globimport openpyxl# Set work dir (where mutation tsv files are located)work_dir = "/Users/davidlord/Documents/External_data/script_running/"os.chdir(work_dir)# Read clinical data table as df:clinical_data_df = pd.read_csv("cbioportal_clinical_data.tsv", sep = '\t')print(clinical_data_df)# Read all mutation files in dirmutation_tables_list = glob.glob("*.mutation.tsv")print(mutation_tables_list)# First do manually, then integrate into for-loop:    # Read files as df    EGFR_df = pd.read_csv("EGFR.mutation.tsv", sep = '\t')    # Filter for MS == Somatic    EGFR_df = EGFR_df[EGFR_df["MS"] == "SOMATIC"]        # Select columns of interest    EGFR_df = EGFR_df[["Sample ID", "Mutation Type", "Variant Type", "MS", "ClinVar"]]            # test merge    # Select only Sample ID and Variant type    mut_merge_df = EGFR_df[["Sample ID", "Variant Type"]]        # Rename "Sample ID" to "Sample.ID" and "Variant type" to EGFR_mutation.     mut_merge_df = mut_merge_df.rename(columns={"Sample ID" : "Sample.ID", "Variant Type" : "EGFR_mutation"})        # Print duplicate sample IDs:    mut_merge_df.duplicated(subset = ['Sample.ID'])        # Later decide on how to deal with these, keep most damaging variant?     # Remove duplicates:    mut_merge_df = mut_merge_df.drop_duplicates(subset = ['Sample.ID'], keep = 'first')        # May later want to include ClinVar in separate mutation-specific column and add to analysis, skip for now.# May want to use "Mutation type" later, use "Variant type" for now.for mutation_table in mutation_tables_list:    # Get mutation name (ugly fix for now, fix with regex later on)    mutation_name = mutation_table[:4]    print(mutation_name)        # Open as df# Create an empty dict (to store mutation file data frames in)file_dict = {}for f in file_list:    # Get filename    filename = os.path.basename(f)    # Read as pandas dataframe    data = pd.read_csv(f)    df = pd.DataFrame(data)    # Store in dict    file_dict[filename] = df# delete intermediate variablesdead_vars = [df, f, filename, data]for i in dead_vars:    del(i)